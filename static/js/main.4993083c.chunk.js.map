{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["number","isMobile","colors","random","i","r","Math","position","color","round","length","scale","rotation","THREE","degToRad","data","Array","fill","map","args","Content","useSprings","from","config","mass","tension","friction","springs","set","useEffect","interval","setInterval","delay","clearInterval","d","index","mesh","key","castShadow","receiveShadow","attach","meshStandardMaterial","roughness","metalness","Lights","intensity","angle","PI","penumbra","shadow-mapSize-width","shadow-mapSize-height","SocialMedia","className","onClick","window","open","SKILLS","category","language","name","value","App","useState","showIntro","setShowIntro","IntroPage","showTransition","setShowTransition","setTimeout","shadowMap","camera","fov","onCreated","gl","setClearColor","ExperienceCard","experience","company","time","descriptions","text","SkillCard","skillIndex","setSkillIndex","skill","ProgressRing","dashArray","setDashArray","style","strokeDasharray","viewbox","cx","cy","AboutPage","exp","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4993083c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { isMobile } from 'react-device-detect';\nimport { useSprings, a } from '@react-spring/three';\nimport * as THREE from 'three';\nimport { Canvas } from 'react-three-fiber';\nimport {\n    AiFillLinkedin, AiFillGithub, AiFillCode, AiFillRead\n} from 'react-icons/ai';\nimport { BsArrowRight, BsCodeSlash } from 'react-icons/bs';\nimport { MdWork, MdSchool, MdFavorite } from 'react-icons/md';\nimport { GiLightSabers, GiPistolGun } from 'react-icons/gi';\nimport './App.css';\n\nconst number = isMobile ? 25 : 35;\n\nconst colors = ['#A2CCB6', '#FCEEB5', '#EE786E', '#e0feff', 'lightpink', 'lightblue'];\n\nconst random = i => {\n    const r = Math.random();\n    return {\n        position: [(isMobile ? 80 : 175) - Math.random() * 200, 100 - Math.random() * 200, i * 1.5],\n        color: colors[Math.round(Math.random() * (colors.length - 1))],\n        scale: [1 + r * 14, 1 + r * 14, 1],\n        rotation: [0, 0, THREE.Math.degToRad(Math.round(Math.random()) * 45)],\n    };\n};\n\nconst data = new Array(number).fill().map(() => ({\n    color: colors[Math.round(Math.random() * (colors.length - 1))],\n    args: [0.1 + Math.random() * 9, 0.1 + Math.random() * 9, 10],\n}));\n\nconst Content = () => {\n    const [springs, set] = useSprings(number, i => ({\n        from: random(i),\n        ...random(i),\n        config: { mass: 20, tension: 150, friction: 50 },\n    }));\n    useEffect(() => {\n        const interval = setInterval(() => set(i => ({ ...random(i), delay: i * 40 })), 2600);\n        return (() => clearInterval(interval));\n    }, []);\n    return data.map((d, index) => (\n        <a.mesh key={index} {...springs[index]} castShadow receiveShadow>\n            <boxBufferGeometry\n                attach=\"geometry\"\n                args={d.args}\n            />\n            <a.meshStandardMaterial\n                attach=\"material\"\n                color={springs[index].color}\n                roughness={0.75}\n                metalness={0.5}\n            />\n        </a.mesh>\n    ));\n};\n\nconst Lights = () => (\n    <group>\n        <pointLight intensity={0.3} />\n        <ambientLight intensity={2} />\n        <spotLight\n            castShadow\n            intensity={0.2}\n            angle={Math.PI / 7}\n            position={[150, 150, 250]}\n            penumbra={1}\n            shadow-mapSize-width={2048}\n            shadow-mapSize-height={2048}\n        />\n    </group>\n);\n\nconst SocialMedia = () => (\n    <>\n        <AiFillGithub className=\"social-media\" onClick={() => window.open('https://github.com/mikezzb')} />\n        <AiFillLinkedin className=\"social-media\" onClick={() => window.open('https://www.linkedin.com/in/mikezzb')} />\n    </>\n);\n\nconst SKILLS = [\n    {\n        category: 'Frontend',\n        language: [\n            {\n                name: 'HTML & CSS',\n                value: 0.8,\n            },\n            {\n                name: 'React.js',\n                value: 0.8,\n            },\n            {\n                name: 'RESTful APIs',\n                value: 0.7,\n            },\n        ],\n    },\n    {\n        category: 'Backend',\n        language: [\n            {\n                name: 'Node.js',\n                value: 0.7,\n            },\n            {\n                name: 'MongoDB',\n                value: 0.5,\n            },\n            {\n                name: 'MySQL',\n                value: 0.48,\n            },\n        ],\n    },\n    {\n        category: 'AIML',\n        language: [\n            {\n                name: 'Python',\n                value: 0.7,\n            },\n            {\n                name: 'Tensorflow',\n                value: 0.5,\n            },\n            {\n                name: 'OpenCV',\n                value: 0.5,\n            },\n        ],\n    },\n    {\n        category: 'OTHERS',\n        language: [\n            {\n                name: 'React Native',\n                value: 0.6,\n            },\n            {\n                name: 'Android',\n                value: 0.5,\n            },\n            {\n                name: 'Java',\n                value: 0.5,\n            },\n        ],\n    },\n];\n\nexport default function App() {\n    const [showIntro, setShowIntro] = useState(true);\n    const IntroPage = () => {\n        const [showTransition, setShowTransition] = useState(false);\n        useEffect(() => {\n            if (showTransition) {\n                setTimeout(() => setShowIntro(false), 2000);\n            }\n        }, [showTransition]);\n        return (\n            <div className=\"intro page\">\n                {\n                    showTransition &&\n                    <div className=\"transition-circle out\" />\n                }\n                <div className=\"text-overlay\">\n                    <div className=\"name-bar\">\n                        <div>\n                            <h4>MIKE</h4>\n                            <h4>ZHOU</h4>\n                        </div>\n                        <span className=\"divider\" />\n                        <SocialMedia />\n                    </div>\n                    <div className=\"description-bar\">\n                        <BsArrowRight\n                            onClick={() => setShowTransition(true)}\n                        />\n                        <h4>Coder&Thinker</h4>\n                        <h4>@BEng AIST CUHK</h4>\n                    </div>\n                </div>\n                <Canvas\n                    shadowMap\n                    camera={{ position: [0, 0, 100], fov: 100 }}\n                    onCreated={({ gl }) => gl.setClearColor('black')}\n                >\n                    <Lights />\n                    <Content />\n                </Canvas>\n            </div>\n        );\n    };\n\n    const ExperienceCard = ({ experience }) => (\n        <div className=\"experience\">\n            <div>\n                <span className=\"position\">{experience.position}</span>\n                <span className=\"company\">{`@${experience.company}`}</span>\n            </div>\n            <span className=\"time\">{experience.time}</span>\n            {\n                experience.descriptions.map(text =>\n                    <span className=\"description\" key={text}>\n                        <p>{text}</p>\n                    </span>\n                )\n            }\n        </div>\n    );\n\n    const SkillCard = () => {\n        const [skillIndex, setSkillIndex] = useState(0);\n        return (\n            <>\n                <h2>\n                    <span className=\"dot\">\n                        <BsCodeSlash />\n                    </span>\n                    CODING SKILLS\n                    <span\n                        className=\"skill-category\"\n                        onClick={() => setSkillIndex(skillIndex === SKILLS.length - 1 ? 0 : skillIndex + 1)}\n                    >\n                        {`(${SKILLS[skillIndex].category})`}\n                    </span>\n                </h2>\n                <div className=\"skills-wrapper\">\n                    {\n                        SKILLS[skillIndex].language.map(skill =>\n                            <div className=\"skill-container\" key={skill.name}>\n                                <ProgressRing value={skill.value} />\n                                <span>\n                                    {skill.name}\n                                </span>\n                            </div>)\n                    }\n                </div>\n            </>\n        );\n    };\n\n    const ProgressRing = ({ value }) => {\n        const [dashArray, setDashArray] = useState(0);\n        useEffect(() => {\n            if (!dashArray) {\n                setDashArray(value * 2 * 60 * Math.PI);\n            }\n        }, [dashArray]);\n        return (\n            <svg\n                className=\"progress-circle\"\n                style={{ strokeDasharray: `${dashArray} 999` }}\n                viewbox=\"0 0 100 100\"\n            >\n                <circle cx=\"50%\" cy=\"50%\" r=\"60\" />\n            </svg>\n        );\n    };\n\n    const AboutPage = () => {\n        const [showTransition, setShowTransition] = useState(true);\n        useEffect(() => {\n            if (showTransition) {\n                setTimeout(() => setShowTransition(false), 2500);\n            }\n        }, [showTransition]);\n        return (\n            <div className=\"about page\">\n                {\n                    showTransition &&\n                    <div className=\"transition-circle\" />\n                }\n                <div className=\"left\">\n                    <div className=\"center top\">\n                        <span className=\"icon\" onClick={() => setShowIntro(true)} />\n                        <h3>Zebo, Zhou</h3>\n                        <h4>About to be a Full Stack Developer</h4>\n                    </div>\n                    <div className=\"bottom\">\n                        <div>\n                            <div>\n                                <span>Mail</span>\n                                <span>Blog</span>\n                                <span>Location</span>\n                            </div>\n                            <div>\n                                <span>mikezhoudev@gmail.com</span>\n                                <span>https://zzblog.herokuapp.com</span>\n                                <span>Hong Kong</span>\n                            </div>\n                        </div>\n                        <div>\n                            <p>\n                                Hi I'm Mike, a tech enthusiast! I love every innovative digital product, both hardware and software.\n                                During my leisure time, I love play around with trendy frameworks & gadgets.\n                            </p>\n                        </div>\n                        <div>\n                            <SocialMedia />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"right\">\n                    <h2>\n                        <span className=\"dot\">\n                            <MdWork />\n                        </span>\n                        WORK EXPERIENCE\n                    </h2>\n                    {\n                        [\n                            {\n                                position: 'Software Engineer Intern',\n                                company: 'KaChick AI Limited',\n                                time: 'Jun 2020 - Spet 2020',\n                                descriptions: [\n                                    'Co-developed an online video proofing platform using React.js and Firebase.',\n                                    'Implemented a fully functional player control without external libraries',\n                                    'Assist in the maintenance and enhancement of an existing photo proofing platform',\n                                    'Conduct feasibility studies in computer vision such as Google Vision and open-source models to analyze visual data.',\n                                ],\n                            },\n                        ].map(exp => <ExperienceCard experience={exp} key={exp.time} />)\n                    }\n                    <h2>\n                        <span className=\"dot\">\n                            <MdSchool />\n                        </span>\n                        EDUCATION\n                    </h2>\n                    {\n                        [\n                            {\n                                position: 'The Chinese University of Hong Kong',\n                                company: 'BEng Artificial Intellegience: System & Technology',\n                                time: 'Spet 2019 - Present',\n                                descriptions: [\n                                    'Dean\\'s List, 2019-2020',\n                                ],\n                            },\n                        ].map(exp => <ExperienceCard experience={exp} key={exp.time} />)\n                    }\n                    <SkillCard />\n                    <h2>\n                        <span className=\"dot\">\n                            <MdFavorite />\n                        </span>\n                        INTERESTS\n                    </h2>\n                    <div className=\"interests-wrapper\">\n                        <div>\n                            <AiFillRead />\n                            Reading\n                        </div>\n                        <div>\n                            <AiFillCode />\n                            Coding\n                        </div>\n                        <div onClick={() => window.open('https://scoresaber.com/u/76561198398187162')}>\n                            <GiLightSabers />\n                            Beat Saber\n                        </div>\n                        <div>\n                            <GiPistolGun />\n                            FPS Games\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n\n    return (\n        <>\n            {\n                showIntro ?\n                    <IntroPage /> :\n                    <AboutPage key=\"About\" />\n            }\n        </>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}